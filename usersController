from pecan import expose, abort, request, response
from pecan.rest import RestController
from pecan.secure import secure
from test_project.model import model
import badgesController


@secure('check_permissions')
class UsersController(RestController):

    badges = badgesController.BadgesController()

    @expose('json')
    def get_one(self, user_id):
        badges = {}
        user = model.get_user(user_id)
        if user:
            for u in user.users:
                badges[u.badge.badge_id] = (u.cant_act, u.badge.amount_necessary, u.badge.description)
            user_dict = {user.user_id:{'fullname':user.fullname,'password':user.password, 'badges':badges}}
            return user_dict
        else:
            response.status = 404

    @expose('json')
    def get_all(self):
        users_dict={}
        for user in model.get_all_users():
            users_dict[user.user_id] = self.get_one(user.user_id)[user.user_id]
        return users_dict

    @expose()
    def post(self):
        user_id = request.POST.get('user_id')
        if model.get_user(user_id):
            response.status = 409
        else:
            fullname = request.POST.get('fullname')
            password = request.POST.get('password')
            if (user_id and fullname and password):
                model.create_user(user_id, fullname, password)
                response.status = 201
            else:
                response.status = 400

    @expose()
    def delete(self, user_id='none'):
        if model.delete_user(user_id):
            response.status = 200
        else:
            response.status = 404

    @expose('json')
    def put(self, user_id_old):
        user_id = request.POST.get('user_id')
        fullname = request.POST.get('fullname')
        password = request.POST.get('password')
        if (user_id_old and user_id and fullname and password):
            if model.edit_user(user_id_old, user_id, fullname, password):
                response.status = 200
            else:
                response.status = 404
        else:
            response.status = 400

    @expose('error.html')
    def notfound(self):
        #import ipdb; ipdb.set_trace()
        #return dict(status=404, message="test_project does not have this page")
        pass
